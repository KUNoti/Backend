// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: create_event.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO "events"
(
 title, latitude, longitude, start_date, end_date, price,
 image, creator, detail, location_name, need_regis, tag,
 created_at, updated_at
 )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING id, start_date, end_date, created_at, updated_at, title, latitude, longitude, price, image, detail, location_name, need_regis, tag, creator
`

type CreateEventParams struct {
	Title        string           `json:"title"`
	Latitude     float64          `json:"latitude"`
	Longitude    float64          `json:"longitude"`
	StartDate    pgtype.Timestamp `json:"start_date"`
	EndDate      pgtype.Timestamp `json:"end_date"`
	Price        float64          `json:"price"`
	Image        pgtype.Text      `json:"image"`
	Creator      int32            `json:"creator"`
	Detail       string           `json:"detail"`
	LocationName string           `json:"location_name"`
	NeedRegis    bool             `json:"need_regis"`
	Tag          pgtype.Text      `json:"tag"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Title,
		arg.Latitude,
		arg.Longitude,
		arg.StartDate,
		arg.EndDate,
		arg.Price,
		arg.Image,
		arg.Creator,
		arg.Detail,
		arg.LocationName,
		arg.NeedRegis,
		arg.Tag,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Latitude,
		&i.Longitude,
		&i.Price,
		&i.Image,
		&i.Detail,
		&i.LocationName,
		&i.NeedRegis,
		&i.Tag,
		&i.Creator,
	)
	return i, err
}
